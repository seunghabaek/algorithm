[알고리즘 설계]

1. 알고리즘 성능평가
- 복잡도는 알고리즘의 성능을 나타내는 척도	
	- 시간 복잡도: 특정한 크기의 입력에 대하여 알고리즘의 수행 시간 분석
	- 공간 복잡도: 특정한 크기의 입력에 대하여 알고리즘의 메모리 사용량 분석

- 복잡도는 낮을수록 좋은 알고리즘.(복잡도는 코드가 복잡하다의 개념이 아님)

- 빅 O 표기법
	- 가장 빠르게 증가하는 항만을 고려하는 표기.
		-> 함수의 상한만을 나타냄.(최고차항만 고려)

	- O(2^n) -> O(n^3) -> O(n^2) -> O(nlogn) -> O(n) -> O(logn) -> O(1) 순으로 알고리즘이 좋음.

		- ex> 2중 반복문의 복잡도 -> O(n^2)
		- 그러나 항상 O(n^2)인 것은 아니고 함수 호출 시간까지 +

- 문제에서 가장 먼저 확인해야 하는 내용은 시간제한.

- 시간제한이 1초라면,
	- N의 범위가 500인 경우: 시간복잡도 O(n^3) 가능.
	- N의 범위가 2,000안 경우: 시간복잡도 O(n^2) 가능.
	- N의 범위가 100,000인 경우: 시간복잡도 O(nlogn) 가능.
	- N의 범위가 10,000,000인 경우: 시간복잡도 O(n) 가능.

- 알고리즘 문제 해결 과정
	1. 지문 읽기 및 컴퓨터적 사고
	2. 요구사항(복잡도) 분석
	3. 문제 해결을 위한 아이디어 찾기
	4. 소스코드 설계 및 코딩

	-> 간결하게 소스코드를 작성하는 것이 핵심!