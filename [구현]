[구현]
	- 구현이란, 머릿속에 있는 알고리즘을 소스코드로 바꾸는 과정.

	- 흔히 알고리즘 대회에서 구현 유영의 문제란?
		- 풀이를 떠올리는 것을 쉽지만, 소스코드로 옮기기 어려운 문제.

	- 구현 유형의 예시
		- 알고리즘은 간단, 코드가 지나칠 만큼 길어지는 문제.
		- 실수 연산을 다루고, 특정 소수점 자리까지 출력해야하는 문제.
		- 문자열을 특정한 기준에 따라서 끊어 처리해야 하는 문제.
		- 적절한 라이브러리를 찾아서 사용해야 하는 경우.(ex. 순열, 조합)

	- 일반적으로 알고리즘 문제에서의 2차원 공간은 행렬의 의미로 사용.
		- ex> for i in range(5):
			      for j in range(5):
			          print('(', i, ',', j, ')', end='')
			      print()

	- 시뮬레이션 및 완전 탐색 문제에서는 2차원 공간에서의 방향벡터가 자주 활용.
		- ex> 
		# 동, 북, 서, 남
		dx = [0, -1, 0, 1]
		dy = [1, 0, -1, 0]

		# 현재 위치
		x, y = 2, 2

		for i in range(4):
			# 다음 위치
			nx = x + dx[i]
			ny = y + dy[i]
			print(nx, ny)

	- 상하좌우 문제
	
	- 시각 문제 아이디어
		- 단순히 시각을 1씩 증가시키면서 3이 하나라도 포함돼 있는지를 확인.
		- 이러한 유형은 완전 탐색(Brute Forcing) 문제 유형이라고 부름.
			- 가능한 경우의 수를 모두 검사해보는 탐색 방법.
