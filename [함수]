[함수]
- 함수의 종류
	- 내장 함수: 파이썬이 기본적으로 제공하는 함수
	
	- 사용자 정의 함수: 개발자가 직접 정의하며 사용하는 함수.

- 함수 정의하기
	- 프로그램에는 똑같은 코드가 반복적으로 사용돼야 할 때가 많다.

	- 함수를 사용하면 소스코드의 길이를 줄일 수 있다.
		- 매개변수: 함수 내부에서 사용할 변수
		- 반환 값: 함수에서 처리 된 결과를 반환

	- ex > def 함수명(매개변수):
		       source code
		       return 반환 값

- 파라미터 지정
	- 파라미터의 변수를 직접 지정가능.
		- 이 경우 매개변수의 순서가 달라도 상관 없음.
		- ex > def add(a,b):
			       print(a+b)

			   add(b = 3, a = 7)

- global 키워드
	- global 키워드로 변수를 지정하면 해당 함수에서는 지역 변수를 만들지 않고, 함수 바깥에 선언된 변수를 바로 참조

	- ex > a = 0

		   def func():
		       global a    # 외부의 a를 참조
		       a += 1

		   for i in range(10):
		       func()

		   print(a)

	- ex > array = [1,2,3,4,5]

		   def func():
		       global array
		       array = [3,4,5]    # 외부의 array가 [3,4,5]로 재할당.
		       array.append(6)

		   func()
		   print(array)    # array = [3,4,5,6]으로 출력

- 여러 개의 반환 값
	- 파이썬에서 함수는 여러 개의 반환 값을 가질 수 있음.

	- ex > def operator(a, b):
		       add_var = a + b
		       subtract_var = a - b
		       multiply_var = a * b
		       divide_var = a / b
		       return add_var, subtract_var, multiply_var, divide_var    # packing

		   a, b, c, d = operator(7, 3)    # unpacking
		   print(a, b, c, d)

- 람다 표현식
	- 람다 표현식을 이용하면 함수를 간단하게 작성할 수 있음.
		- 특정한 기능을 수행하는 함수를 한 줄에 작성 가능

		- ex > def add(a, b):
			       return a + b

			   print(add(3, 7))  <- 일반적인 add()

			   print((lambda a, b: a + b)(3, 7)) <- 람다 표현

		- ex > array = [('홍길동', 50), ('이순신', 32), ('아무개', 74)]

			   def my_key(x):
			       return x[1]

			   print(sorted(array, key=my_key))

			   print(sorted(array, key=lambda x: x[1])) <- 람다

		- ex > list1 = [1,2,3,4,5]
			   list2 = [6,7,8,9,10]

			   result = map(lambda a, b: a + b, list1, list2)
			   # map 메서드는 각각의 원소에 적용할 때 사용.
			   print(list(result))

- 자주 사용되는 함수
	- 순열과 조합 함수
		- 순열
			- ex > from itertools import permutations

				   data = ['A', 'B', 'C']

				   result = list(permutations(data, 3))
				   print(result)

		- 조합: 서로 다른 n개에서 순서에 상관 없이 서로 다른 r 개 선택

	- counter
		- 파이썬 collections 라이브러리의 Counter는 등장 횟수를 세는 기능을 제공.
		- 리스트와 같은 반복 가능한 객체가 주어졌을 때 내부의 원소가 몇 번씩 등장했는지를 알려줌.
		