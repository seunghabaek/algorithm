[정렬 알고리즘]
- 정렬이란 데이터를 특정한 기준에 따라 순서대로 나열하는 것

- 일반적으로 문제 상황에 따라서 적절한 정렬 알고리즘이 공식처럼 사용됨.

- 선택 정렬 알고리즘
	- 처리되지 않은 데이터 중에서 가장 작은 데이터를 선택해 맨 앞에 있는 데이터와 바꿔줌.

	- ex> 카드가 7, 5, 9, 0, 3, 1, 6, 2, 4, 8순으로 정렬되어있을때,
		- [step 0] 처리되지 않은 데이터 중 가장 작은 0 을 선택해 가장 앞의 7과 바꿔줌
			-> 0, 5, 9, 7, 3, 1, 6, 2, 4, 8

		- [step 1] 처리되지 않은 데이터 중 가장 작은 1을 선택해 가장 앞의 5와 바꿔줌
			-> 0, 1, 9, 7, 3, 5, 6, 2, 4, 8

		- 이러한 과정을 반복하면 데이터가 순서대로 정렬됨.

	- 선택 정렬의 시간 복잡도
		- 선택 정렬은 N번 만큼 가장 작은 수를 찾아서 맨 앞으로 보내야 함.
		- 전체 연산횟수 = N + (N - 1) + (N - 2) + ... + 2
			-> (N^2 + N - 2) / 2로 표현 가능 - O(N^2)이라고 작성.

- 삽입 정렬 알고리즘
	- 처리되지 않은 데이터를 하나씩 골라 적절한 위치에 삽입함.
	
	- 선택 정렬에 비해 구현 난이도가 높은 편이지만, 일반적으로 더 효율적으로 동작.

	- ex> 카드가 7, 5, 9, 0, 3, 1, 6, 2, 4, 8순으로 정렬
		- [step 0] 첫 번째 데이터 7은 그 자체로 정렬이 되어 있다고 판단, 두 번째 데이터인 5가 어떤 위치로 들어갈지 판단.
				   7의 왼쪽, 오른쪽 두 경우만 존재

		- [step 1] 이어서 9가 어떤 위치로 들어갈지 판단.

	- 삽입 정렬의 시간 복잡도
		- 삽입 정렬의 시간 복잡도는 O(N^2)이며 - if 문 중첩-

		- 삽입 정렬은 현재 리스트의 데이터가 거의 정렬돼 있는 상태라면 매우 빠르게 동작.
			- 최선의 경우 O(N)의 시간 복잡도를 가짐.
			- 이미 정렬돼 있는 상태에서 다시 삽입 정렬을 수행하면?

- 퀵 정렬 알고리즘
	- 기준 데이터를 설정하고 그 기준보다 큰 데이터와 작은 데이터의 위치를 바꾸는 방법

	- 일반적인 상황에서 가장 많이 사용되는 정렬 알고리즘

	- 병합 정렬과 더불어 대부분의 프로그래밍 언어의 정렬 라이브러리의 근간이 되는 알고리즘

	- 가장 기본적인 퀵 정렬은 첫 번째 데이터를 기준 데이터(pivot)으로 설정

	- ex > 카드가 5, 7, 9, 0, 3, 1, 6, 2, 4, 8
		- [step 0] 현재 피벗의 값은 5 이고 왼쪽에서부터 5보다 큰 데이터 7을 선택하고 오른쪽에서부터 5보다 작은 데이터 4를 선택해 두 데이터의 위치를 바꿈.

		- [step 1] 현재 피벗은 5이고 왼쪽에서부터 9를 선택, 오른쪽에서부터 2를 선택해 자리 바꿈.

		- [step 2] 현재 피벗은 5, 왼쪽에서부터 6을 선택, 오른쪽에서부터 1을 선택하는데 이때 위치가 엇갈리게 되는데 이런 경우에는 피벗과 작은 데이터 1의 위치를 바꿔.

		- [분할 완료] 이제 5의 왼쪽에 있는 데이터는 모두 5보다 작고, 오른쪽에 있는 데이터는 모두 5보다 크다는 특징. 이처럼 피벗을 기준으로 데이터 묶음을 나누는 작업을 분할이라고 함.

		- 각각의 묶음에서 다시 퀵 정렬 동작.
			-> 재귀적.

	- 퀵 정렬의 시간 복잡도
		- 퀵 정렬은 평균의 경우 O(NlogN)의 시간 복잡도를 가짐.

		- 하지만 최악의 경우 O(N^2)의 시간 복잡도를 가짐.

- 계수 정렬
	- 특정한 조건이 부합할 때만 사용가능, 
