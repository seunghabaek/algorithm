[이진 탐색 알고리즘]
- 순차탐색 : 리스트 안에 있는 특정한 데이터를 찾기 위해 앞에서부터 데이터를 하나씩 확인하는 방법.

- 이진 탐색 :  정렬돼 있는 리스트에서 탐색 범위를 절반씩 좁혀가며 데이터를 탐색하는 방법
	- 이진 탐색은 시작점, 끝점, 중간점을 이용해 탐색 범위를 설정.

	- ex >  정렬된 10개의 데이터 0 2 4 6 8 10 12 14 16 18
		- [step 1] 시작점: 0, 끝점: 9, 중간점: 4(소수점 이하 제거)

		- [step 2] 찾고자 하는 숫자가 중간점보다 작다 -> 중간점 이후 숫자들은 볼필요 x
			 -> 중간점 앞에서 다시 이진탐색.

	- 이진 탐색의 시간 복잡도
		-단계마다 탐색 범위를 2로 나누는 것과 동일하므로 연산 횟수는 log2N에 비례.

		- 이진탐색은 탐색 범위를 절반씩 줄이며, 시간 복잡도는 O(logN)을 보장.

	- 파이썬 이진 탐색 라이브러리
		- bisec_left(a, x): 정렬된 순서를 유지하면서 배열 a에 x가 들어갈 수 있는 가장 왼쪽의 index 반환

		- bisec_right(a, x): 정렬된 순서를 유지하면서 배열 a에 x가 들어갈 수 있는 가장 오른쪽의 index 반환

	- 파라메트릭 서치(parametric search)
		- 파라메트릭 서치란 최적화 문제를 결정문제(예 혹은 아니오)로 바꾸어 해결하는 기법임.
			- ex > 특정한 조건을 만족하는 가장 알맞은 값을 빠르게 찾는 최적화 문제

		- 일반적으로 코딩 테스트에서 파라메트릭 서치 문제는 이진 탐색을 이용해 해결.

	- ex > 떡볶이 떡 만들기.
		- 적절한 높이를 찾을 때까지 이진 탐색을 수행하여 높이 H를 반복해서 조정.

		- 현재 이높이로 자르면 조건을 만족할 수 있는가? 를 확인한 뒤에 조건의 만족 여부(예 혹은 아니로)에 따라서 탐색 범위를 좁혀서 해결할 수 있음.

		- 절단기의 높이는 0부터 10억까지의 정수
			-> 이렇게 큰 탐색 범위를 보면 가장 먼저 이진 탐색을 떠올려야 됨.

		- 문제 해결 아이디어
			- 이러한 이진 탐색 과정을 반복하면 답을 도출할 수 있음.
			- 중간점의 값은 시간이 지날수록 '최적화된 값'이기 때문에, 과정을 반복하면서 얻을 수 있는 떡의 길이 합이 필요한 떡의 길이보다 크거나 같을 때마다 중간점의 값을 기록하면 됨.

	- ex > 정렬된 배열에서 특정 수의 개수 구하기
		- 문제 해결 아이디어
			- 시간 복잡도 O(logN)으로 동작하는 알고리즘을 요구
				- 일반적인 선형 탐색으로는 시간 초과 판정
				- 하지만 데이터가 정렬되어 있기 때문에 이진 탐색 수행

			- 특정 값이 등장하는 첫 번째 위치와 마지막 위치를 찾아 위치 차이를 계산해 문제 해결.

