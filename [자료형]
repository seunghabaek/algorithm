[자료형]
- 파이썬의 자료형으로는 정수형, 실수형, 복소수형, 문자열, 리스트, 튜플, 사전 등이 있음.

- 정수형
	- 정수형은 정수를 다루는 자료형.
		- 양의 정수, 음의 정수, 0

- 실수형
	- 실수형(Real number)은 소수점 아래의 데이터를 포함하는 수 자료형.
		- 파이썬에서는 변수에 소수점을 붙이면 실수형 변수로 처리.

- 지수 표현 방식
	- e나 E를 이용한 지수 표현 방식.
 
- 실수형 표현
	- 컴퓨터는 실수를 정확하게 표현하지 못할 때가 많다.
		-> round() 함수 사용!

- 수 자료형의 연산
	- / 나누기 연산자의 경우 실수형 return
	- % 나머지 연산자.
	- // 몫 연산자.
	- ** 거듭 제곱 연산자.

- 리스트 자료형
	- 여러 개의 데이터를 연속적으로 담아 처리하기 위해 사용하는 자료형.
		- C나 java에서의 배열의 기능. 연결 리스트와 유사한 기능.
		- C++의 STL vector와 기능적으로 유사.
		- 리스트 대신에 '배열' 혹은 '테이블'이라고 부름

	- 리스트 초기화
		- 리스트는 []안에 원소를 넣어 초기화,
		- 비어 있는 리스트를 선언할 떄는 list(), []
		- 리스트의 원소에 접근할 때는 index로
			-> list[1]

	- 리스트 인덱싱
		- 양의 정수 음의 정수 모두 사용 가능.
		- 음의 정수를 넣으면 거꾸로 탐색
			-> a = [1,2,3,4,5,6,7,8,9]
			   print(a[-3]) = 7(뒤에서 3번쨰)

	- 리스트 슬라이싱
		- 대괄호안에 :을 넣어서 시작 index, 끝 index 설정
		- 끝 index는 실제 index보다 1을 더 크게 설정

	** 리스트 컴프리헨션 **
		- 리스트를 초기화하는 방법 중 하나.
			- 대괄호 안에 조건문과 반복문을 적용.
				-> 0부터 9까지의 수를 포함하는 리스트
				-> array = [i for i in range(10)]
					-> for 반복문부터 작성.

				-> 0부터 19까지 홀수만
				-> array = [i for i in range(20) if i % 2 == 1]

				-> 1부터 9까지의 수들의 제곱
				-> array = [i*i for i in range(1,10)]

		- 리스트 컴프리헨션은 2차원 리스트를 초기화할 때 효과적.

		- 특히 NxM 크기의 2차원 리스트를 한 번에 초기화할 때 좋음.
			- array = [[0] * m for _ in range(n)]

			** _ 란?
				-> 파이썬에서는 반복을 수행하되, 반복을 위한 변수의 값을 무시하고자 할 때 _사용.
					-> ex)
						for _ in range(5):
							print('Hello world')

	- 리스트 명령어
		- .append(): 리스트에 원소 삽입 -> O(1)
		- .sort(): 오름차순 정렬 -> O(nlogn)
		- .sort(reverse=True): 내림차순 정렬 -> O(nlogn)
		- insert(삽입 위치 index, 값): 특정한 index 위치에 원소를 삽입. -> O(n)
		- .count(특정 값): 리스트에서 특정값을 가지는 데이터의 갯수 -> O(n)
		- .remove(특정 값): 특정 값 제거(단 한개만 제거됨.)
			- 리스트에서 특정 값을 가지는 원소 모두 제거
				-> 
				a = [1,2,3,4,5,5,5]
				remove_set = {3,5}  # 집합 자료형

				result = [i for i in a if i not in remove_set]

- 문자열 자료형
	- 문자열 변수를 초기화할 때는 큰 따옴표나 작은 따옴표 사용.

	- 문자열 안에 큰 따옴표나 작은 따옴표가 포함돼야 하는 경우가 있음.
		- 전체를 큰 따옴표로 구성하는 경우 내부에 작은 따옴표 포함 가능.
		- 전체를 작은 따옴표로 구성하는 경우 내부에 큰 따옴표 포함 가능.
		- \사용시 큰 따옴표나 작은 따옴표를 원하는 만큼 포함시킬 수 있음.
			- ex> \" or \'

	- 문자열 연산
		- +이용시 문자열이 concatenate
		- 특정한 양의 정수와 곱셈 시 문자열이 여러번 더해짐.
		- 인덱싱, 슬라이싱 사용 가능
			- 그러나 인덱스 값 변경 불가.

- 튜플 자료형
	- 튜플 자료형은 리스트와 유사하지만 문법적 차이.
		- 튜플은 한 번 선언된 값을 변경할 수 없음.
		- 리스트는 대괄호 이용, 튜플은 소괄호 이용
	
	- 튜플은 리스트에 비해 상대적으로 공간효율적.
		-> ex> a = (1,2,3,4,5)

	- 튜플을 사용하면 좋은 경우
		- 서로 다른 성질의 데이터를 묶어서 관리해야 할 때
			-> 최단 경로 알고리즘에서는 (비용, 노드번호)의 형태로 튜플 자료형을 자주 사용.
		- 데이터의 나열을 해싱의 키 값으로 사용해야할 때
			-> 튜플은 변경이 불가능하므로 리스트와 다르게 키 값으로 사용 가능.
		- 리스트보다 메모리를 효율적으로 사용해야 할때.

- dictionary 자료형
	- key value의 쌍을 데이터로 가지는 자료형
		-> 리스트나 튜플과 다르게 순서 x

	- 파이썬의 사전 자료형은 해시 테이블을 이용하므로 데이터의 조회 및 수정에 있어서 O(1)의 시간에 처리 가능.

		-> ex> data = dict()
			   data['사과'] = 'Apple'
			   data['바나나'] = 'Banana'
			   data['코코넛'] = 'Coconut'
			   -> data['key'] = 'value'

	- 사전 자료형 관련 메서드
		- 사전 자료형에서는 key, value를 별도로 뽑아낼 수 있음.
			- key값을 리스트로: keys() 
			- value값을 리스트오: values()
				-> 그러나 이렇게 만들어진 리스트는 dict-list 리스트라서 일반 리스트로 만들어주려면 list()해줌.

		-> ex> key_list = data.keys()
			   value_list = data.values()

			   # 각 키에 대한 값을 하나씩 출력
			   for key in key_list:
			   		print(data[key])

- 집합 자료형
	- 집합 자료형의 특징
		- 중복을 허용하지 않고,
		- 순서가 없음.
			-> 특정한 데이터의 유무를 판단할 때 자주 사용.

	- 집합은 리스트 혹은 문자열을 이용해서 초기화.
		- set() 사용

	- 또는 {}안에 각 원소를 ,기준으로 구분하여 삽입함으로 초기화.

	- 데이터의 조회 및 수정에 있어서 O(1)의 시간에 처리 가능.

		-> ex> data = set([1,1,2,3,4,4,5])
			   print(data) -> {1,2,3,4,5}

			   data = {1,1,2,3,4,4,5}
			   print(data) -> {1,2,3,4,5}

	- 집합 자료형의 연산
		- 합집합
			-> a|b
		- 교집합
			-> a&b
		- 차집합
			-> a-b

	- 집합 자료형 관련 함수
		- 새로운 원소 추가: data.add(4)
		- 새로운 원소 여러 개 추가: data.update([5,6])
		- 특정한 값을 갖는 원소 삭제: data.remove(3)

	- 사전 자료형과 집합 자료형의 특징
		- 리스트나 튜플은 순서가 있기 때문에 인덱싱 사용 가능
		- 사전 자료형: key 사용, 집합 자료형: element 사용
			-> O(1)의 시간 복잡도로 조회 가능