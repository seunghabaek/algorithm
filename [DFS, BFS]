[DFS/BFS]
-그래프 탐색 알고리즘
	- 탐색이란 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정
	- DFS와 BFS는 대표적인 그래프 탐색 알고리즘.
	- DFS/BFS는 코딩테스트에서 매우 자주 등장하는 유형

- 스택 자료구조
	- 먼저 들어 온 데이터가 나중에 나가는 형식(선입후출)의 자료 구조
	- 입구와 출구가 동일한 형태로 스택을 시각화. -> 박스쌓기

- 큐 자료구조
	- 먼저 들어 온 데이터가 먼저 나가는 형식(선입선출)의 자료구조
	- 큐는 입구와 출구가 모두 뚫려 있 터널과 같은 형태.

- 재귀 함수
	- 자기 자신을 다시 호출하는 함수

	- 재귀함수의 종료 조건
		- 재귀 함수를 문제 풀이에서 사용할 때는 재귀 함수의 종료 조건을 반드시 명시.
		- 종료 조건을 제대로 명시하지 않으면 함수가 무한히 호출.
			- ex>
			def recursive_function(i):
				if i == 100:
					return
				print('{}번쨰 재귀함수에서 {}번째 재귀함수를 호출합니다.'.format(i, i+1))
				recursive_function(i+1)
				print('{}번째 재귀함수를 종료합니다.'.format(i))
			recursive_function(1)

	- 재귀함수 사용의 유의사항
		- 재귀함수는 점화식을 구하
		면 쉽게 구할 수 있음(그대로 구현)
		- 모든 재귀 함수는 반복문을 이용해 동일한 기능 구현 가능.
		- 재귀 함수가 반복문보다 유리한 경우도 있고, 불리한 경우도 있음.
		- 스택 대신 사용하는 경우도 있음.

- DFS(Depth-First Search) 
	- 깊이 우선 탐색, 깊은 부분을 우선적으로 탐색하는 기법

	- 스택 자료구조(또는 재귀함수)를 이용하며,
		1. 탐색 시작 노드를 스택에 삽입하고 방문 처리
		2. 스택의 최상단 노드에 방문하지 않은 인접한 노드가 하나라도 있으면 그 노드를 스택에 넣고 방문 처리. 방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼냄.
		3. 2번의 과정을 수행할 수 없을때까지 반복.

- BFS(Breadth-First Search)
	- BFS는 너비 우선 탐색이라고도 부르며, 그래프에서 가까운 노드부터 우선적으로 탐색.

	- 큐 자료구조 이용,
		1. 탐색 시작 노드를 큐에 삽입하고 방문 처리
		2. 큐에서 노드를 꺼낸 뒤에 해당 노드의 인접 노드 중에서 방문하지 않은 노를 모두 큐에 삽입하고 방문 처리
		3. 더 이상 2번의 과정을 수행할 수 없을 떄까지 반복.

	- BFS 문제는 최단거리 문제로도 활용 가능 (큐에 기준으로부터 가까운 순으로 집어넣기 때문.)

	- 문제 풀이
		- 음료수 얼려 먹기 : DFS/BFS 이용
			- DFS 이용
				- 특정한 지점의 주변 상, 하, 좌, 우를 살펴본 뒤에 주변 지점 중에서 값이 0 이면서 아직 방문하지 않은 지점이 있다면 해당 지점을 방문.
				- 방문한 지점에서 다시 상, 하, 좌, 우를 살펴보면서 방문을 진행하는 과정을 반복하면, 연결된 모든 지점을 방문할 수 있음.
				- 모든 노드에 대하여 1 ~ 2번의 과정을 반복하며, 반복하지 않은 지점의 수 카운트
			
